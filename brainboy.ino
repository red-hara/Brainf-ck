#include <Arduboy2.h>
#include <EEPROM.h>

Arduboy2 arduboy;

#define LINE_WIDTH 20
#define OFFSET 4
#define DATA_SIZE 256
#define PROG_SIZE 512
#define OUTP_SIZE 40
#define INPU_SIZE 40

const byte PROGMEM qr[] = {0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 
0x80, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x80, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x80, 0x0E, 0x38, 0x00, 0x00, 0x00, 0x30, 0x00, 
0x00, 0x78, 0x00, 0x00, 0x18, 0x00, 0x00, 0x01, 
0x00, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x38, 0x00, 
0x00, 0xFC, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x00, 0x0C, 0x18, 0x00, 0x00, 0x00, 0xEC, 0x00, 
0x01, 0xCE, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x00, 0x0C, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x00, 
0x01, 0x86, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x00, 0x0C, 0x3B, 0x38, 0x47, 0xE0, 0x79, 0x9F, 
0x83, 0xB0, 0x00, 0x0F, 0x8C, 0x10, 0x00, 0x00, 
0x00, 0x0C, 0x73, 0x7F, 0xCF, 0xF0, 0x31, 0xDF, 
0xCF, 0xF1, 0x98, 0x3F, 0xCC, 0x30, 0x00, 0x00, 
0x00, 0x0F, 0xE1, 0xEF, 0x9C, 0x38, 0x00, 0xF0, 
0xED, 0xC1, 0x98, 0x30, 0xEC, 0x30, 0x00, 0x00, 
0x00, 0x0F, 0xE0, 0xC0, 0x18, 0x18, 0x00, 0xE0, 
0x61, 0x81, 0x98, 0x60, 0x6C, 0x60, 0x00, 0x00, 
0x00, 0x0E, 0x30, 0xC0, 0x00, 0x18, 0x30, 0x60, 
0x61, 0x8F, 0xFF, 0x60, 0x6C, 0xE0, 0x00, 0x00, 
0x00, 0x0C, 0x38, 0xC0, 0x00, 0x38, 0x30, 0x60, 
0x61, 0x8F, 0xFF, 0x60, 0x0D, 0xC0, 0x00, 0x00, 
0x00, 0x0C, 0x1C, 0xC0, 0x07, 0xF8, 0x30, 0x60, 
0x61, 0x81, 0x98, 0x60, 0x07, 0x80, 0x00, 0x00, 
0x00, 0x0C, 0x0C, 0xC0, 0x0F, 0xD8, 0x30, 0x60, 
0x61, 0x81, 0x98, 0x60, 0x0F, 0x00, 0x00, 0x00, 
0x00, 0x0C, 0x0C, 0xC0, 0x1C, 0x18, 0x30, 0x60, 
0x61, 0x8F, 0xFF, 0x60, 0x0E, 0xC0, 0x00, 0x00, 
0x00, 0x0C, 0x0C, 0xC0, 0x18, 0x18, 0x30, 0x60, 
0x61, 0x8F, 0xFF, 0x60, 0x6C, 0xE0, 0x00, 0x00, 
0x00, 0x0C, 0x0C, 0xC0, 0x18, 0x1C, 0x30, 0x60, 
0x61, 0x81, 0x98, 0x60, 0x6C, 0x70, 0x00, 0x00, 
0x00, 0x0E, 0x0C, 0xC0, 0x1C, 0x3C, 0x78, 0x60, 
0x61, 0x81, 0x98, 0x30, 0xEC, 0x30, 0x00, 0x00, 
0x00, 0x0F, 0xF8, 0xC0, 0x0F, 0xF6, 0xFC, 0x60, 
0x61, 0x81, 0x98, 0x3F, 0xCC, 0x30, 0x00, 0x00, 
0x00, 0x07, 0xF0, 0xC0, 0x07, 0xE6, 0xCC, 0x60, 
0x61, 0x80, 0x00, 0x1F, 0x8C, 0x30, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 
0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x21, 0xCC, 
0x3A, 0x48, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAF, 0xBA, 0xB7, 
0x4E, 0x3B, 0xEA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA8, 0xA4, 0x2B, 
0x82, 0xAA, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA8, 0xA6, 0xDB, 
0xC3, 0x0A, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA8, 0xAD, 0x63, 
0xC8, 0x4A, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAF, 0xB6, 0x0B, 
0x63, 0x1B, 0xEA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA0, 0x2A, 0xAA, 
0xAA, 0xA8, 0x0A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBF, 0xF0, 0x85, 
0xBB, 0x6F, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA1, 0xA4, 0x0F, 
0xD8, 0x16, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAC, 0xEA, 0x70, 
0x76, 0x84, 0x5A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB9, 0x38, 0x6B, 
0xDF, 0x70, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB9, 0x57, 0xF4, 
0xA6, 0xC3, 0xCA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA5, 0xA1, 0xAF, 
0xE2, 0x57, 0xBA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB7, 0xC9, 0xBE, 
0x3A, 0x49, 0xCA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBC, 0x8A, 0x35, 
0x62, 0x97, 0x0A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB7, 0xD2, 0x9A, 
0x6B, 0xEA, 0x5A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA7, 0x0C, 0xF2, 
0x51, 0xA7, 0x0A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAF, 0x78, 0x4A, 
0x2D, 0x61, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB0, 0xBF, 0xDB, 
0x38, 0xB7, 0x7A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA0, 0xC8, 0xF3, 
0xA8, 0x2D, 0x8A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBE, 0x1B, 0x6E, 
0x1A, 0x02, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB6, 0x6B, 0x8C, 
0x7D, 0x2E, 0x4A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBA, 0x0B, 0x5A, 
0xDB, 0x27, 0x5A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAF, 0x58, 0x5B, 
0xB7, 0x95, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB9, 0x88, 0xB7, 
0xE4, 0x5C, 0x9A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA5, 0x6A, 0x5D, 
0xB2, 0xC7, 0x8A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBE, 0x3F, 0xB0, 
0xBA, 0x09, 0x4A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBA, 0xF2, 0x42, 
0x6B, 0xA2, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBA, 0xB4, 0xE3, 
0x14, 0x84, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBC, 0x6F, 0x66, 
0x19, 0x89, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAC, 0x8F, 0x8A, 
0x39, 0xE6, 0xFA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBA, 0xFD, 0xB5, 
0x8D, 0x13, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xB7, 0xBB, 0xE3, 
0x0E, 0x00, 0x2A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xBF, 0xEC, 0xE8, 
0x7D, 0x8E, 0x0A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA0, 0x30, 0xB7, 
0xC7, 0xCA, 0x1A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xAF, 0xB6, 0x3B, 
0xE3, 0x8E, 0x7A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA8, 0xB8, 0xDB, 
0xA4, 0x60, 0x9A, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0xA8, 0xA0, 0xE9, 
0xF8, 0xED, 0xCA, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x80, 0x00, 0x00, 0x00, 0x02, 0xA8, 0xA1, 0x4D, 
0xB7, 0x1D, 0xCA, 0x80, 0x00, 0x00, 0x00, 0x01, 
0x80, 0x00, 0x00, 0x00, 0x02, 0xAF, 0xA1, 0xED, 
0x6C, 0xB2, 0x5A, 0x80, 0x00, 0x00, 0x00, 0x01, 
0x80, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x22, 0x0B, 
0x0E, 0x85, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x01, 
0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 
0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F};

char data[DATA_SIZE];
char prog[PROG_SIZE] = {'+','+','+','+','+','+','+','+','[','>','+','+','+','+','[','>','+','+','>','+','+','+','>','+','+','+','>','+','<','<','<','<','-',']','>','+','>','+','>','-','>','>','+','[','<',']','<','-',']','>','>','.','>','-','-','-','.','+','+','+','+','+','+','+','.','.','+','+','+','.','>','>','.','<','-','.','<','.','+','+','+','.','-','-','-','-','-','-','.','-','-','-','-','-','-','-','-','.','>','>','+','.','>','+','+','.'};
char output[OUTP_SIZE];
char input[INPU_SIZE];
short datap = 0;
short progp = 0;
byte outpp = 0;
byte inpup = 0;

byte progoffsl = 0;
char inputchar = 32;

enum editmode {
  MOVE,
  LETTER,
  CONTEXT,
} editmode;

enum mode {
  EDIT,
  RUN,
  TYPE,
} mode;

void setup() {
  Serial.begin(9600);
  arduboy.begin();
  arduboy.setFrameRate(20);
  arduboy.clear();
  arduboy.drawSlowXYBitmap(0, 0, qr, 128, 64, WHITE);
  arduboy.display();
  while(!arduboy.pressed(A_BUTTON )) {}
  arduboy.waitNoButtons();
  mode = EDIT;
  editmode = MOVE;
  tryLoad();
}

void loop() {
  while (!arduboy.nextFrameDEV()) {return;}
  arduboy.clear();
  arduboy.pollButtons();
  printOutput();
  printInput();
  switch (mode) {
    case RUN:
      executeprog();
      break;
    case TYPE:
      type();
      break;
    case EDIT:
      edit();
      break;
  }
  printProg();
  drawBorder();
  arduboy.display();
}

void tryLoad() {
  short signature;
  EEPROM.get(EEPROM_STORAGE_SPACE_START, signature);
  if (signature != 6174) {
    return;
  }
  for (short s = 0; s < 512; s++) {
    prog[s] = EEPROM.read(s + sizeof(short) + EEPROM_STORAGE_SPACE_START);
  }
}

void save() {
  short signature = 6174;
  EEPROM.put(EEPROM_STORAGE_SPACE_START, signature);
  for (short s = 0; s < 512; s++) {
    EEPROM.update(s + sizeof(short) + EEPROM_STORAGE_SPACE_START, prog[s]);
  }
}

void write() {
  short counter = 0;
  do {
    Serial.print(prog[counter]);
    counter ++;
  } while (prog[counter] != 0 && counter < 511);
}

void read() {
  short counter = 0;
  while (Serial.available() > 0 && counter < PROG_SIZE) {
    char value = Serial.read();
    if (value == '>' || value == '<' || value == '+' || value == '-' || value == '.' || value == ',' || value == '[' || value == ']') {
      prog[counter] = value;
      counter ++;
    }
  }
  for (short b = counter; b < PROG_SIZE; b++) {
    prog[b] = 0;
  }
}

void executeprog() {
  arduboy.setRGBled(16, 16, 0);
  if (arduboy.pressed(A_BUTTON | B_BUTTON)) {
    mode = EDIT;
  }
  switch (prog[progp]) {
    case '>':
      datap ++;
      break;
    case '<':
      datap --;
      break;
    case '+':
      data[datap] ++;
      break;
    case '-':
      data[datap] --;
      break;
    case '.':
      print();
      break;
    case ',':
      mode = TYPE;
      break;
    case '[':
      if (data[datap] == 0) {
        jumpForward();
      }
      break;
    case ']':
      if (data[datap] != 0) {
        jumpBack();
      }
      break;
  }
  progp ++;
  if (prog[progp] == 0) {
    mode = EDIT;
  }
}

void edit() {
  switch (editmode) {
    case MOVE:
      arduboy.setRGBled(0, 0, 16);
      if (arduboy.justPressed(A_BUTTON)) {
        editmode = LETTER;
      }
      if (arduboy.justPressed(B_BUTTON)) {
        editmode = CONTEXT;
      }
      if (arduboy.justPressed(UP_BUTTON)) {
        if (progp >= LINE_WIDTH) {
          progp -= LINE_WIDTH;
        }
      }
      if (arduboy.justPressed(DOWN_BUTTON)) {
        if (progp < 255 - LINE_WIDTH) {
          progp += LINE_WIDTH;
          while (prog[progp] == 0 && progp > 0) {
            progp --;
          }
        }
      }
      if (arduboy.justPressed(LEFT_BUTTON)) {
        if (progp > 0) {
          progp --;
        }
      }
      if (arduboy.justPressed(RIGHT_BUTTON)) {
        if (prog[progp + 1] != 0) {
          progp ++;
        }
      }
      break;
    case LETTER:
      arduboy.setRGBled(16, 16, 16);
      if (arduboy.justPressed(A_BUTTON)) {
        editmode = MOVE;
      }
      if (arduboy.justPressed(B_BUTTON)) {
        editmode = CONTEXT;
      }
      if (arduboy.justPressed(UP_BUTTON)) {
        increaseLetter();
      }
      if (arduboy.justPressed(DOWN_BUTTON)) {
        decreaseLetter();
      }
      if (arduboy.justPressed(LEFT_BUTTON)) {
        erase();
      }
      if (arduboy.justPressed(RIGHT_BUTTON)) {
        insert();
      }
      break;
    case CONTEXT:
      arduboy.setRGBled(0, 0, 0);
      printContext();
      if (arduboy.justPressed(UP_BUTTON)) {
        for (byte b = 0; b < OUTP_SIZE; b++) {
          output[b] = 0;
        }
        for (byte b = 0; b < INPU_SIZE; b++) {
          input[b] = 0;
        }
        for (short b = 0; b < DATA_SIZE; b++) {
          data[b] = 0;
        }
        outpp = 0;
        inpup = 0;
        progp = 0;
        mode = RUN;
        editmode = MOVE;
      }
      if (arduboy.justPressed(DOWN_BUTTON)) {
        save();
        editmode = MOVE;
      }
      if (arduboy.justPressed(RIGHT_BUTTON)) {
        write();
        editmode = MOVE;
      }
      if (arduboy.justPressed(LEFT_BUTTON)) {
        read();
        editmode = MOVE;
      }
      if (arduboy.justPressed(A_BUTTON)) {
        editmode = MOVE;
      }
      if (arduboy.justPressed(B_BUTTON)) {
        editmode = MOVE;
      }
      break;
  }
}

void increaseLetter() {
  switch (prog[progp]) {
   case '>':
      prog[progp] = '<';
      break;
    case '<':
      prog[progp] = '+';
      break;
    case '+':
      prog[progp] = '-';
      break;
    case '-':
      prog[progp] = '.';
      break;
    case '.':
      prog[progp] = ',';
      break;
    case ',':
      prog[progp] = '[';
      break;
    case '[':
      prog[progp] = ']';
      break;
    case ']':
      prog[progp] = '>';
  }
}

void decreaseLetter() {
  switch (prog[progp]) {
   case '>':
      prog[progp] = ']';
      break;
    case '<':
      prog[progp] = '>';
      break;
    case '+':
      prog[progp] = '<';
      break;
    case '-':
      prog[progp] = '+';
      break;
    case '.':
      prog[progp] = '-';
      break;
    case ',':
      prog[progp] = '.';
      break;
    case '[':
      prog[progp] = ',';
      break;
    case ']':
      prog[progp] = '[';
  }
}

void erase() {
  short counter = progp;
  do {
    prog[counter] = prog[counter + 1];
    counter ++;
  } while(prog[counter] != 0 && counter < PROG_SIZE - 1);
  prog[counter] = 0;
}

void insert() {
  short counter = progp;
  char prev;
  char forw = prog[counter];
  if (counter == 0 && prog[counter] == 0) {
    prog[counter] = '.';
  } else {
    do {
      prev = prog[counter + 1];
      prog[counter + 1] = forw;
      forw = prev;
      counter ++;
    } while(prog[counter] != 0 && counter < PROG_SIZE - 1);
  }
}

void type() {
  arduboy.setRGBled(16, 0, 0);
  if (input[inpup] == 0) {
    input[inpup] = ' ';
  }
  if (arduboy.justPressed(A_BUTTON)) {
    data[datap] = input[inpup];
    inpup ++;
    mode = RUN;
  }
  if (arduboy.justPressed(UP_BUTTON)) {
    input[inpup] = ((short)input[inpup] - 32 + 94 - 1) % (94) + 32;
  }
  if (arduboy.justPressed(DOWN_BUTTON)) {
    input[inpup] = ((short)input[inpup] - 32 + 94 + 1) % (94) + 32;
  }
}

void print() {
  output[outpp] = data[datap];
  outpp ++;
}

void jumpForward() {
  short counter = 1;
  do {
    progp ++;
    if (prog[progp] == '[') {
      counter ++;
    }
    if (prog[progp] == ']') {
      counter --;
    }
  } while (counter > 0 && prog[progp] != 0);
}

void jumpBack() {
  short counter = 1;
  do {
    progp --;
    if (prog[progp] == '[') {
      counter --;
    }
    if (prog[progp] == ']') {
      counter ++;
    }
  } while (counter > 0 && prog[progp] > 0);
}

void printProg() {
  arduboy.setCursor(OFFSET, 0);
  char current = 0;
  short counter = 0;
  byte line = 0;
  byte pointerline = progp / LINE_WIDTH;
  if (pointerline > progoffsl + 3) {
    progoffsl = pointerline - 2;
  } else if (pointerline < progoffsl) {
    progoffsl = pointerline;
  }
  
  do {
    current = prog[counter + progoffsl * LINE_WIDTH];
    if (counter + progoffsl * LINE_WIDTH == progp) {
      arduboy.setTextColor(BLACK);
      arduboy.setTextBackground(WHITE);
    }
    arduboy.print(current);
    if (counter + progoffsl * LINE_WIDTH == progp) {
      arduboy.setTextColor(WHITE);
      arduboy.setTextBackground(BLACK);
    }
    if (counter % LINE_WIDTH == LINE_WIDTH - 1) {
      line ++;
      arduboy.setCursor(OFFSET, line * 8);
    }
    counter ++;
  } while (current != 0 && counter < LINE_WIDTH * 4 && counter < PROG_SIZE);
}

void printOutput() {
  arduboy.setCursor(OFFSET, 32);
  char current = 0;
  short counter = 0;
  byte line = 0;
  do {
    current = output[counter];
    arduboy.print(current);
    if (counter % LINE_WIDTH == LINE_WIDTH - 1) {
      line ++;
      arduboy.setCursor(OFFSET, line * 8 + 32);
    }
    counter ++;
  } while (current != 0 && counter < LINE_WIDTH * 2);
}

void printInput() {
  arduboy.setCursor(OFFSET, 48);
  char current = 0;
  short counter = 0;
  byte line = 0;
  do {
    current = input[counter];
    arduboy.print(current);
    if (counter % LINE_WIDTH == LINE_WIDTH - 1) {
      line ++;
      arduboy.setCursor(OFFSET, line * 8 + 48);
    }
    counter ++;
  } while (current != 0 && counter < LINE_WIDTH * 2);
}

void printContext() {
  arduboy.setTextColor(BLACK);
  arduboy.setTextBackground(WHITE);
  arduboy.setCursor(21+32, 32);
  arduboy.print("RUN");
  arduboy.setCursor(32, 40);
  arduboy.print("READ");
  arduboy.setCursor(34+32, 40);
  arduboy.print("WRITE");
  arduboy.setCursor(18+32, 48);
  arduboy.print("SAVE");
  arduboy.setTextColor(WHITE);
  arduboy.setTextBackground(BLACK);
}

void drawBorder() {
  arduboy.drawLine(0, 0, 3, 0);
  arduboy.drawLine(0, 0, 0, 3);
  arduboy.drawLine(0, 63, 3, 63);
  arduboy.drawLine(0, 63, 0, 60);

  arduboy.drawLine(127, 0, 124, 0);
  arduboy.drawLine(127, 0, 127, 3);
  arduboy.drawLine(127, 63, 124, 63);
  arduboy.drawLine(127, 63, 127, 60);
}
